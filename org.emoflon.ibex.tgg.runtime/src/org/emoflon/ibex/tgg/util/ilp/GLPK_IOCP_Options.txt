 typedef struct
  155 {     /* integer optimizer control parameters */
  156       int msg_lev;            /* message level (see glp_smcp) */
  157       int br_tech;            /* branching technique: */
  158 #define GLP_BR_FFV         1  /* first fractional variable */
  159 #define GLP_BR_LFV         2  /* last fractional variable */
  160 #define GLP_BR_MFV         3  /* most fractional variable */
  161 #define GLP_BR_DTH         4  /* heuristic by Driebeck and Tomlin */
  162 #define GLP_BR_PCH         5  /* hybrid pseudocost heuristic */
  163       int bt_tech;            /* backtracking technique: */
  164 #define GLP_BT_DFS         1  /* depth first search */
  165 #define GLP_BT_BFS         2  /* breadth first search */
  166 #define GLP_BT_BLB         3  /* best local bound */
  167 #define GLP_BT_BPH         4  /* best projection heuristic */
  168       double tol_int;         /* mip.tol_int */
  169       double tol_obj;         /* mip.tol_obj */
  170       int tm_lim;             /* mip.tm_lim (milliseconds) */
  171       int out_frq;            /* mip.out_frq (milliseconds) */
  172       int out_dly;            /* mip.out_dly (milliseconds) */
  173       void (*cb_func)(glp_tree *T, void *info);
  174                               /* mip.cb_func */
  175       void *cb_info;          /* mip.cb_info */
  176       int cb_size;            /* mip.cb_size */
  177       int pp_tech;            /* preprocessing technique: */
  178 #define GLP_PP_NONE        0  /* disable preprocessing */
  179 #define GLP_PP_ROOT        1  /* preprocessing only on root level */
  180 #define GLP_PP_ALL         2  /* preprocessing on all levels */
  181       double mip_gap;         /* relative MIP gap tolerance */
  182       int mir_cuts;           /* MIR cuts       (GLP_ON/GLP_OFF) */
  183       int gmi_cuts;           /* Gomory's cuts  (GLP_ON/GLP_OFF) */
  184       int cov_cuts;           /* cover cuts     (GLP_ON/GLP_OFF) */
  185       int clq_cuts;           /* clique cuts    (GLP_ON/GLP_OFF) */
  186       int presolve;           /* enable/disable using MIP presolver */
  187       int binarize;           /* try to binarize integer variables */
  188       int fp_heur;            /* feasibility pump heuristic */
  189       int ps_heur;            /* proximity search heuristic */
  190       int ps_tm_lim;          /* proxy time limit, milliseconds */
  191       int sr_heur;            /* simple rounding heuristic */
  192 #if 1 /* 24/X-2015; not documented--should not be used */
  193       int use_sol;            /* use existing solution */
  194       const char *save_sol;   /* filename to save every new solution */
  195       int alien;              /* use alien solver */
  196 #endif
  197       double foo_bar[24];     /* (reserved) */
  198 } glp_iocp;
  
  
  Options specific to the MIP solver:

  --nomip           consider all integer variables as continuous
                    (allows solving MIP as pure LP)
  --first           branch on first integer variable
  --last            branch on last integer variable
  --mostf           branch on most fractional variable
  --drtom           branch using heuristic by Driebeck and Tomlin
                    (default)
  --pcost           branch using hybrid pseudocost heuristic (may be
                    useful for hard instances)
  --dfs             backtrack using depth first search
  --bfs             backtrack using breadth first search
  --bestp           backtrack using the best projection heuristic
  --bestb           backtrack using node with best local bound
                    (default)
  --intopt          use MIP presolver (default)
  --nointopt        do not use MIP presolver
  --binarize        replace general integer variables by binary ones
                    (assumes --intopt)
  --fpump           apply feasibility pump heuristic
  --gomory          generate Gomory's mixed integer cuts
  --mir             generate MIR (mixed integer rounding) cuts
  --cover           generate mixed cover cuts
  --clique          generate clique cuts
  --cuts            generate all cuts above
  --mipgap tol      set relative mip gap tolerance to tol
