/**
 *
 * $Id$
 */
package org.emoflon.ibex.patternmodel.IBeXPatternModel.validation;

import org.eclipse.emf.common.util.EList;

import org.emoflon.ibex.patternmodel.IBeXPatternModel.IBeXArithmeticConstraint;
import org.emoflon.ibex.patternmodel.IBeXPatternModel.IBeXContext;
import org.emoflon.ibex.patternmodel.IBeXPatternModel.IBeXContextPattern;
import org.emoflon.ibex.patternmodel.IBeXPatternModel.IBeXCreatePattern;
import org.emoflon.ibex.patternmodel.IBeXPatternModel.IBeXDeletePattern;
import org.emoflon.ibex.patternmodel.IBeXPatternModel.IBeXParameter;
import org.emoflon.ibex.patternmodel.IBeXPatternModel.IBeXProbability;

/**
 * A sample validator interface for {@link org.emoflon.ibex.patternmodel.IBeXPatternModel.IBeXRule}.
 * This doesn't really do anything, and it's not a real EMF artifact.
 * It was generated by the org.eclipse.emf.examples.generator.validator plug-in to illustrate how EMF's code generator can be extended.
 * This can be disabled with -vmargs -Dorg.eclipse.emf.examples.generator.validator=false.
 */
public interface IBeXRuleValidator {
	boolean validate();

	boolean validateDocumentation(String value);

	boolean validateLhs(IBeXContext value);

	boolean validateRhs(IBeXContextPattern value);

	boolean validateCreate(IBeXCreatePattern value);

	boolean validateDelete(IBeXDeletePattern value);

	boolean validateParameters(EList<IBeXParameter> value);

	boolean validateArithmeticConstraints(EList<IBeXArithmeticConstraint> value);

	boolean validateProbability(IBeXProbability value);
}
