/**
 *
 * $Id$
 */
package org.emoflon.ibex.patternmodel.IBeXPatternModel.validation;

import org.eclipse.emf.common.util.EList;

import org.emoflon.ibex.patternmodel.IBeXPatternModel.IBeXArithmeticConstraint;
import org.emoflon.ibex.patternmodel.IBeXPatternModel.IBeXAttributeConstraint;
import org.emoflon.ibex.patternmodel.IBeXPatternModel.IBeXCSP;
import org.emoflon.ibex.patternmodel.IBeXPatternModel.IBeXEdge;
import org.emoflon.ibex.patternmodel.IBeXPatternModel.IBeXInjectivityConstraint;
import org.emoflon.ibex.patternmodel.IBeXPatternModel.IBeXNode;
import org.emoflon.ibex.patternmodel.IBeXPatternModel.IBeXParameter;
import org.emoflon.ibex.patternmodel.IBeXPatternModel.IBeXPatternInvocation;

/**
 * A sample validator interface for {@link org.emoflon.ibex.patternmodel.IBeXPatternModel.IBeXContextPattern}.
 * This doesn't really do anything, and it's not a real EMF artifact.
 * It was generated by the org.eclipse.emf.examples.generator.validator plug-in to illustrate how EMF's code generator can be extended.
 * This can be disabled with -vmargs -Dorg.eclipse.emf.examples.generator.validator=false.
 */
public interface IBeXContextPatternValidator {
	boolean validate();

	boolean validateDocumentation(String value);

	boolean validateAttributeConstraint(EList<IBeXAttributeConstraint> value);

	boolean validateArithmeticConstraints(EList<IBeXArithmeticConstraint> value);

	boolean validateInjectivityConstraints(EList<IBeXInjectivityConstraint> value);

	boolean validateInvocations(EList<IBeXPatternInvocation> value);

	boolean validateLocalEdges(EList<IBeXEdge> value);

	boolean validateLocalNodes(EList<IBeXNode> value);

	boolean validateSignatureNodes(EList<IBeXNode> value);

	boolean validateCsps(EList<IBeXCSP> value);

	boolean validateParameters(EList<IBeXParameter> value);

	boolean validateOptimizedDisjoint(boolean value);

	boolean validateSubpattern(double value);

	boolean validateSubpattern(boolean value);
}
